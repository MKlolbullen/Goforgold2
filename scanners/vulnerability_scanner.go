// scanners/vulnerability_scanner.go - Runs vulnerability scanners (sqlmap, dalfox, etc.)
package scanners

import (
	"encoding/json"
	"io/ioutil"
	"path/filepath"
	"recon-tool/main"
	"recon-tool/parsers"
	"recon-tool/utils"
)

// RunVulnerabilityScans executes sqlmap and dalfox, then updates scan results.
func RunVulnerabilityScans(target, outDir string, result *main.ScanResult, logFn func(string)) {
	logFn("[*] Starting vulnerability scanning...")
	// Run sqlmap with default arguments.
	sqlOut, err := utils.RunCommand("sqlmap", "-u", target, "--batch")
	if err == nil {
		sqlVulns := parsers.ParseSqlmapOutput(sqlOut)
		result.VulnURLs = append(result.VulnURLs, sqlVulns...)
	} else {
		logFn("[!] sqlmap error: " + err.Error())
	}
	// Run dalfox with default arguments.
	dalfoxOut, err := utils.RunCommand("dalfox", "url", target)
	if err == nil {
		xssVulns := parsers.ParseDalfoxOutput(dalfoxOut)
		result.VulnURLs = append(result.VulnURLs, xssVulns...)
	} else {
		logFn("[!] dalfox error: " + err.Error())
	}
	logFn("[*] Vulnerability scanning complete.")
	// Persist vulnerabilities to file.
	vulnFile := filepath.Join(outDir, "vulnerabilities.json")
	data, _ := json.MarshalIndent(result.VulnURLs, "", "  ")
	_ = ioutil.WriteFile(vulnFile, data, 0644)
}
